Q1. Convert the hexadecimal number 973D4 to base 17. You must show your work. (2 points) 

Q2. Error Finding (4 points)

Each of the following 68K assembly language instructions will cause an assembler error. Examine each instruction and explain why the assembler would flag it as an error.

1) MOVE.B      $A000, A3
2) ADD.B       #$1000, D2
3) MOVEA.W     $1234, D0
4) ANDI.B      #23, #$100   

Q3. Create a source file and analyze the results. Submit the .X68 and .L68 files and answer the question. For simplicity, name your source file as HW1.X68 and your listfile as HW1.L68. (4 points) 

QUESTION: What is the WORD VALUE (not byte, or longword) of the data in memory location $4000, when the program is just about to loop back to the beginning and start over again? Please describe how you got the answer as well. (For example, you can describe how you analyzed the code segments, or how you traced the code segments with debug tools)
Warning: Do not copy and paste the code segments. It might cause some errors which you might spend whole day to find out. 

=======================================================================================
* Watch out for comments, if the text spills over to the next line and you forget to use an asterisk, you'll get an error.
********************************************************************************************************
*
*  Beginning of EQUates section, just like #define in C
*
********************************************************************************************************
addr1     EQU     $4000        
addr2     EQU     $4001 
data2     EQU     $A7FF 
data3     EQU     $5555 
data4     EQU     $0000 
data5     EQU     4678 
data6     EQU     %01001111 
data7     EQU     %00010111 
********************************************************************************************************
*
* Beginning of code segment. This is the actual assembly language instructions.
*
********************************************************************************************************

ORG       $400          * This pseudo op code tells the assembler here                                                                                                                       
                        * the program will run in memory

start    MOVE.W    #data2,D0     * Load D0 
         MOVE.B    #data6,D1     * Load D1 
         MOVE.B    #data7,D2     * load D2 
         MOVE.W    #data3,D3     * load D3 
         MOVEA.W   #addr1,A0     * load address register 
         MOVE.B    D1,(A0)+      * transfer byte to memory 
         MOVE.B    D2,(A0)+      * transfer second byte
         MOVEA.W   #addr1,A1     * load address 
         AND.W     D3,(A1)       * Logical AND

* The next instruction shows how a label is used
        JMP        start        * This instruction keeps the program
                                * looping forever

        END   $400              * This pseudo op-code tells the assembler 
                                * where the program source code ends and
                                * where to load the program in memory. 
* End of the program
 ********************************************************************************************************
 =======================================================================================
 
 Q4. Two’s complement (7 points)

Assume that we are using 16-bits system. Represent a negative integer with two’s complement format.

(2 pts) Convert the decimal numbers -102 and -87 into hexadecimal number
(1 pt) Add two numbers of the previous question as hexadecimal, and state,
whether the sign bit of the result is 1
whether an overflow occurred.
(4 pts) Write a program in assembly to add the two numbers (-102 and -87). Inputs should be in hexadecimal format. Store the result in hexadecimal at an address $5000.  Print out the result in command output window as decimal format.(Hint: use the trap function task #3). If an error (overflow) happens, you should also print out the error (overflow) message as well.
